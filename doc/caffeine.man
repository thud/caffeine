'\" et
.TH CAFFEINE "1" 2021 "thud" "User Commands"
.\"
.SH NAME
caffeine \- Interact with the Codeforces API from the CLI or scripts.
.SH SYNOPSIS
.LP
.nf
caffeine \fB[\fRFLAGS\fB]\fR \fB[\fROPTIONS\fB]\fR \fB[\fRSUBCOMMAND\fB]\fR
.fi
.SH DESCRIPTION
The
.I caffeine
utility allows you to interact with the official Codeforces API from a command
line or shell scripts. It also provides a way of submitting a solution for any
given problem (through the
.I "headless_chrome"
rust crate). It also allows you to quickly download the input testcases for any
given problem provided by Codeforces (through web-scraping).
.P
By default, almost all responses are returned as yaml since this should be
fairly easy to parse from a shell script. It is also arguably more easily
human-readable than the API's JSON format.
.SH SUBCOMMANDS
.P
The following subcommands are supported:
.TP
\fBblogentry\fR
Run API methods related to a Codeforces blogentry. This is generally useful for
fetching data about a blog post.
.TP
\fBconfig\fR
Change configuration of the program. This includes the defaults (eg. default
user, default programming language).
.TP
\fBcontest\fR
Run API methods related to Codeforces contests. This is generally useful for
getting information about a contest, its submissions or standings.
.TP
\fBhelp\fR
Return help text (generated by the
.I clap
rust crate).
.TP
\fBlogin\fR
Change default login credentials. This includes the API key/secret and the
handle/password.
.TP
\fBproblemset\fR
Run API methods related to Codeforces problemsets. This is generally useful for
getting information about problems with specific tags.
.TP
\fBrecentactions\fR
Get all the recent actions by (all) users of the Codeforces platform.
.TP
\fBsubmit\fR
Submit a solution to a problem (either from stdin or filename).
.TP
\fBuser\fR
Run API methods related to Codeforces users. This is generally useful for
getting information about a user or their submissions.
.SH BLOGENTRY SUBCOMMANDS
The following operations are supported for the
.I blogentry
subcommand.
.TP
\fBcomments\fR
Returns the list of comments on a specified blog entry.
.TP
\fBhelp\fR
Return help for the
.I blogentry
subcommand.
.TP
\fBview\fR
Returns specified blog entry
.SH CONTEST SUBCOMMANDS
The following operations are supported for the
.I contest
subcommand.
.TP
\fBhacks\fR
Returns list of hacks in the specified contests.
.TP
\fBhelp\fR
Return help for the
.I contest
subcommand.
.TP
\fBlist\fR
Returns information about all available contests.
.TP
\fBratingchanges\fR
Returns rating changes after a contest.
.TP
\fBstandings\fR
Returns the description of the contest and the requested part of the standings.
.TP
\fBstatus\fR
Returns submissions for the specified contest.
.TP
\fBtestcases\fR
Custom convenience function which provides the testcases in a more scriptable
format (functions via web-scraping since not directly available from API).
.SH PROBLEMSET SUBCOMMANDS
The following operations are supported for the
.I problemset
subcommand.
.TP
\fBhelp\fR
Return help for the
.I problemset
subcommand.
.TP
\fBproblems\fR
Returns all problems from a given problemset.
.TP
\fBrecentstatus\fR
Returns recent submissions for a given problemset.
.SH USER SUBCOMMANDS
The following operations are supported for the
.I user
subcommand.
.TP
\fBblogentries\fR
Returns a list of user's blog entries.
.TP
\fBfriends\fR
Return's friends of the currently logged in user (owner of API key).
.TP
\fBhelp\fR
Return help for the
.I user
subcommand.
.TP
\fBinfo\fR
Returns information about one or more users.
.TP
\fBratedlist\fR
Returns the list of users who have participated in >=1 rated contests.
.TP
\fBrating\fR
Returns the rating history of a specified user.
.TP
\fBstatus\fR
Returns submissions of a specified user.

.SH FLAGS
Globally, three flags are supported:
.TP
\fB\-h\fR, \fB\-\-help\fR
Show the help message for the current (sub)command.
.TP
\fB\-v\fR, \fB\-\-version\fR
Print the version number for the currently installed release.
.TP
\fB\-r\fR, \fB\-\-raw\fR
For commands which directly utilise the Codeforces API, you can specify that
you would like the direct JSON response rather than the default yaml. No parsing
is done to check for errors so error-handling will have to be done manually by
the user.

.SH OPTIONS
Globally, two options are supported:
.TP
\fB\-k\fR, \fB\-\-key\fR <key>
Provide the API key as a CLI argument. Whilst this may be convenient to use
from within scripts, it is recommended against since it may show in shell
history files (eg. .bash_history). Instead you should use the
.I login
command.
.TP
\fB\-s\fR, \fB\-\-secret\fR <secret>
Provide the API secret as a CLI argument. Whilst this may be convenient to use
from within scripts, it is recommended against since it may show in shell
history files (eg. .bash_history). Instead you should use the
.I login
command.
.P
For non-global options, see the subcommand's help page.

.SH EXAMPLES
.TP
\fBget a user's latest submission\fR
caffeine user status 'thud' -n1
.TP
\fBsubmit a solution\fR
caffeine submit 1494 A a.cpp \fBOR\fR cat a.cpp | caffeine submit 1494 A
.TP
\fBget testcases for a contest\fR
caffeine contest testcases 1493 --wait

.SH DIRECTORIES
.TP
\fBauthentication\fR
By default, the login credentials and API keys (entered with the \fIlogin\fR
command) are stored in \fB$XDG_DATA_HOME/caffeine/auth.yml\fR. For further
information check the \fIdirectories\fR rust crate (data_dir method).
.TP
\fBconfiguration\fR
By default, the configured settings (defaults) (entered with the \fIconfig\fR
command) are stored in \fB$XDG_CONFIG_HOME/caffeine/config.yml\fR. For further
information check the \fIdirectories\fR rust crate (data_dir method).

.SH "SEE ALSO"
.IR "\fIxalanq/cf-tool\fR\^"
.P
See the caffeine github repository at https://github.com/thud/caffeine for the
full documentation.
.\"
.SH LICENSE
\fIcaffeine\fR is licensed under the MIT license. A copy of this license can be
found in the associated git repository (https://github.com/thud/caffeine).
